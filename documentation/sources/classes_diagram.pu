@startuml classes_diagram

' --- Пакеты / пространства имён ---
package "mram_driver" {
  
  struct Spi {
    +virtual void transfer(std::span<const uint8_t> tx, std::span<uint8_t> rx) = 0
    +virtual void cs_assert() = 0
    +virtual void cs_deassert() = 0
    +virtual void delay_us(uint32_t) = 0
    +virtual void set_wp(bool) {}
    +virtual void set_hold(bool) {}
  }

  struct CsGuard {
    - Spi& s
    + CsGuard(Spi& s_)
    + ~CsGuard()
  }

  class MR25H40 {
    - Spi& spi_
    + static constexpr uint32_t kSize
    + MR25H40(Spi& spi)
    + void read(uint32_t addr, std::span<uint8_t> out)
    + void write_page(uint32_t addr, std::span<const uint8_t> in)
    + void erase_all()
    + void read_status(uint8_t &sr)
    + void write_status(uint8_t sr)
    + void write_enable()
    + void write_disable()
    + void sleep()
    + void wake()
    + void set_block_protect(Protect p, bool hw_lock = false)
  }

  struct Bureau {
    + size_t prog_qty
    + uint32_t math_qty
    + uint8_t head_qty
    + float salary_sum
  }

  package "BureauCodec (ns)" {
    class BureauCodec {
      + void encode(const Bureau& b, std::span<uint8_t, BureauCodec::kSize> out)
      + Bureau decode(std::span<const uint8_t, BureauCodec::kSize> in)
    }
  }

  struct RecordHeader {
    + uint32_t magic
    + uint16_t version
    + uint16_t reserved
    + uint32_t length
    + uint32_t crc32
    + uint64_t seqno
  }

  class BureauStore {
    - MR25H40& mram_
    + BureauStore(MR25H40& mram)
    + bool write(const Bureau& b)
    + std::optional<Bureau> read_latest()
  }
}

' --- отношения ---
Spi <|-- MR25H40 : uses
Spi <|-- CsGuard : RAII
MR25H40 --> "BureauStore" : storage backend
BureauStore ..> RecordHeader : manages
BureauStore ..> BureauCodec : enc/dec
BureauCodec ..> Bureau : serializes

@enduml
